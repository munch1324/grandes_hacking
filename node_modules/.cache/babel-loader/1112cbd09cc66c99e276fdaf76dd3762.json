{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* eslint-disable complexity */\n\n/* eslint-disable max-statements */\nrequire('../vendor/polyfills');\n\nvar AuthSdkError = require('../errors/AuthSdkError');\n\nvar builderUtil = require('../builderUtil');\n\nvar config = require('../config');\n\nvar cookies = require('./browserStorage').storage;\n\nvar http = require('../http');\n\nvar oauthUtil = require('../oauthUtil');\n\nvar Q = require('q');\n\nvar session = require('../session');\n\nvar token = require('../token');\n\nvar TokenManager = require('../TokenManager');\n\nvar tx = require('../tx');\n\nvar util = require('../util');\n\nfunction OktaAuthBuilder(args) {\n  var sdk = this;\n  var url = builderUtil.getValidUrl(args); // OKTA-242989: support for grantType will be removed in 3.0 \n\n  var usePKCE = args.pkce || args.grantType === 'authorization_code';\n  this.options = {\n    url: util.removeTrailingSlash(url),\n    clientId: args.clientId,\n    issuer: util.removeTrailingSlash(args.issuer),\n    authorizeUrl: util.removeTrailingSlash(args.authorizeUrl),\n    userinfoUrl: util.removeTrailingSlash(args.userinfoUrl),\n    tokenUrl: util.removeTrailingSlash(args.tokenUrl),\n    pkce: usePKCE,\n    redirectUri: args.redirectUri,\n    httpRequestClient: args.httpRequestClient,\n    storageUtil: args.storageUtil,\n    transformErrorXHR: args.transformErrorXHR,\n    headers: args.headers\n  };\n\n  if (this.options.pkce && !sdk.features.isPKCESupported()) {\n    throw new AuthSdkError('This browser doesn\\'t support PKCE');\n  }\n\n  this.userAgent = 'okta-auth-js-' + config.SDK_VERSION; // Digital clocks will drift over time, so the server\n  // can misalign with the time reported by the browser.\n  // The maxClockSkew allows relaxing the time-based\n  // validation of tokens (in seconds, not milliseconds).\n  // It currently defaults to 300, because 5 min is the\n  // default maximum tolerance allowed by Kerberos.\n  // (https://technet.microsoft.com/en-us/library/cc976357.aspx)\n\n  if (!args.maxClockSkew && args.maxClockSkew !== 0) {\n    this.options.maxClockSkew = config.DEFAULT_MAX_CLOCK_SKEW;\n  } else {\n    this.options.maxClockSkew = args.maxClockSkew;\n  } // Give the developer the ability to disable token signature\n  // validation.\n\n\n  this.options.ignoreSignature = !!args.ignoreSignature;\n  sdk.session = {\n    close: util.bind(session.closeSession, null, sdk),\n    exists: util.bind(session.sessionExists, null, sdk),\n    get: util.bind(session.getSession, null, sdk),\n    refresh: util.bind(session.refreshSession, null, sdk),\n    setCookieAndRedirect: util.bind(session.setCookieAndRedirect, null, sdk)\n  };\n  sdk.tx = {\n    status: util.bind(tx.transactionStatus, null, sdk),\n    resume: util.bind(tx.resumeTransaction, null, sdk),\n    exists: util.bind(tx.transactionExists, null, sdk),\n    introspect: util.bind(tx.introspect, null, sdk)\n  }; // This is exposed so we can mock document.cookie in our tests\n\n  sdk.tx.exists._get = function (name) {\n    return cookies.get(name);\n  }; // This is exposed so we can mock window.location.href in our tests\n\n\n  sdk.idToken = {\n    authorize: {\n      _getLocationHref: function () {\n        return window.location.href;\n      }\n    }\n  };\n  sdk.token = {\n    getWithoutPrompt: util.bind(token.getWithoutPrompt, null, sdk),\n    getWithPopup: util.bind(token.getWithPopup, null, sdk),\n    getWithRedirect: util.bind(token.getWithRedirect, null, sdk),\n    parseFromUrl: util.bind(token.parseFromUrl, null, sdk),\n    decode: token.decodeToken,\n    renew: util.bind(token.renewToken, null, sdk),\n    getUserInfo: util.bind(token.getUserInfo, null, sdk),\n    verify: util.bind(token.verifyToken, null, sdk)\n  }; // This is exposed so we can set window.location in our tests\n\n  sdk.token.getWithRedirect._setLocation = function (url) {\n    window.location = url;\n  }; // This is exposed so we can mock getting window.history in our tests\n\n\n  sdk.token.parseFromUrl._getHistory = function () {\n    return window.history;\n  }; // This is exposed so we can mock getting window.location in our tests\n\n\n  sdk.token.parseFromUrl._getLocation = function () {\n    return window.location;\n  }; // This is exposed so we can mock getting window.document in our tests\n\n\n  sdk.token.parseFromUrl._getDocument = function () {\n    return window.document;\n  };\n\n  sdk.fingerprint._getUserAgent = function () {\n    return navigator.userAgent;\n  };\n\n  var isWindowsPhone = /windows phone|iemobile|wpdesktop/i;\n\n  sdk.features.isFingerprintSupported = function () {\n    var agent = sdk.fingerprint._getUserAgent();\n\n    return agent && !isWindowsPhone.test(agent);\n  };\n\n  sdk.tokenManager = new TokenManager(sdk, args.tokenManager);\n}\n\nvar proto = OktaAuthBuilder.prototype;\nproto.features = {};\n\nproto.features.isPopupPostMessageSupported = function () {\n  var isIE8or9 = document.documentMode && document.documentMode < 10;\n\n  if (window.postMessage && !isIE8or9) {\n    return true;\n  }\n\n  return false;\n};\n\nproto.features.isTokenVerifySupported = function () {\n  return typeof crypto !== 'undefined' && crypto.subtle && typeof Uint8Array !== 'undefined';\n};\n\nproto.features.isPKCESupported = function () {\n  return proto.features.isTokenVerifySupported();\n}; // { username, password, (relayState), (context) }\n\n\nproto.signIn = function (opts) {\n  var sdk = this;\n  opts = util.clone(opts || {});\n\n  function postToTransaction(options) {\n    delete opts.sendFingerprint;\n    return tx.postToTransaction(sdk, '/api/v1/authn', opts, options);\n  }\n\n  if (!opts.sendFingerprint) {\n    return postToTransaction();\n  }\n\n  return sdk.fingerprint().then(function (fingerprint) {\n    return postToTransaction({\n      headers: {\n        'X-Device-Fingerprint': fingerprint\n      }\n    });\n  });\n};\n\nproto.signOut = function () {\n  return this.session.close();\n};\n\nbuilderUtil.addSharedPrototypes(proto); // { resource, (rel), (requestContext)}\n\nproto.webfinger = function (opts) {\n  var url = '/.well-known/webfinger' + util.toQueryParams(opts);\n  var options = {\n    headers: {\n      'Accept': 'application/jrd+json'\n    }\n  };\n  return http.get(this, url, options);\n};\n\nproto.fingerprint = function (options) {\n  options = options || {};\n  var sdk = this;\n\n  if (!sdk.features.isFingerprintSupported()) {\n    return Q.reject(new AuthSdkError('Fingerprinting is not supported on this device'));\n  }\n\n  var deferred = Q.defer();\n  var iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n\n  function listener(e) {\n    if (!e || !e.data || e.origin !== sdk.options.url) {\n      return;\n    }\n\n    try {\n      var msg = JSON.parse(e.data);\n    } catch (err) {\n      return deferred.reject(new AuthSdkError('Unable to parse iframe response'));\n    }\n\n    if (!msg) {\n      return;\n    }\n\n    if (msg.type === 'FingerprintAvailable') {\n      return deferred.resolve(msg.fingerprint);\n    }\n\n    if (msg.type === 'FingerprintServiceReady') {\n      e.source.postMessage(JSON.stringify({\n        type: 'GetFingerprint'\n      }), e.origin);\n    }\n  }\n\n  oauthUtil.addListener(window, 'message', listener);\n  iframe.src = sdk.options.url + '/auth/services/devicefingerprint';\n  document.body.appendChild(iframe);\n  var timeout = setTimeout(function () {\n    deferred.reject(new AuthSdkError('Fingerprinting timed out'));\n  }, options.timeout || 15000);\n  return deferred.promise.fin(function () {\n    clearTimeout(timeout);\n    oauthUtil.removeListener(window, 'message', listener);\n\n    if (document.body.contains(iframe)) {\n      iframe.parentElement.removeChild(iframe);\n    }\n  });\n};\n\nmodule.exports = builderUtil.buildOktaAuth(OktaAuthBuilder);","map":null,"metadata":{},"sourceType":"script"}