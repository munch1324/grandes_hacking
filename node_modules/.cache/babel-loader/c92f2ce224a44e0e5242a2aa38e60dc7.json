{"ast":null,"code":"var _jsxFileName = \"/Users/mgrande/Desktop/js_hacking/grandes_hacking/src/pages/PostsManager.js\";\nimport React, { Component, Fragment } from 'react';\nimport { withAuth } from '@okta/okta-react';\nimport { withRouter, Route, Redirect, Link } from 'react-router-dom';\nimport { withStyles, Typography, IconButton, Paper, List, ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport { Delete as DeleteIcon, Add as AddIcon } from '@material-ui/icons';\nimport moment from 'moment';\nimport { find, orderBy } from 'lodash';\nimport { compose } from 'recompose';\nimport PostEditor from '../components/PostEditor';\nimport ErrorSnackbar from '../components/ErrorSnackbar';\n\nconst styles = theme => ({\n  posts: {\n    marginTop: theme.spacing(2)\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(3),\n    right: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2)\n    }\n  }\n});\n\nconst API = process.env.REACT_APP_API || 'http://localhost:3001';\n\nclass PostsManager extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      posts: [],\n      error: null\n    };\n\n    this.savePost = async post => {\n      if (post.id) {\n        await this.fetch('put', \"/posts/\".concat(post.id), post);\n      } else {\n        await this.fetch('post', '/posts', post);\n      }\n\n      this.props.history.goBack();\n      this.getPosts();\n    };\n\n    this.renderPostEditor = ({\n      match: {\n        params: {\n          id\n        }\n      }\n    }) => {\n      if (this.state.loading) return null;\n      const post = find(this.state.posts, {\n        id: Number(id)\n      });\n      if (!post && id !== 'new') return React.createElement(Redirect, {\n        to: \"/posts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      });\n      return React.createElement(PostEditor, {\n        post: post,\n        onSave: this.savePost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getPosts();\n  }\n\n  async fetch(method, endpoint, body) {\n    try {\n      const response = await fetch(\"\".concat(API).concat(endpoint), {\n        method,\n        body: body && JSON.stringify(body),\n        headers: {\n          'content-type': 'application/json',\n          accept: 'application/json',\n          authorization: \"Bearer \".concat((await this.props.auth.getAccessToken()))\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error(error);\n      this.setState({\n        error\n      });\n    }\n  }\n\n  async getPosts() {\n    this.setState({\n      loading: false,\n      posts: (await this.fetch('get', '/Stocks')) || []\n    });\n  }\n\n  async deletePost(post) {\n    if (window.confirm(\"Are you sure you want to delete \\\"\".concat(post.title, \"\\\"\"))) {\n      await this.fetch('delete', \"/posts/\".concat(post.id));\n      this.getPosts();\n    }\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Posts Manager\"), this.state.posts.length > 0 ? React.createElement(Paper, {\n      elevation: 1,\n      className: classes.posts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, orderBy(this.state.posts, ['updatedAt', 'title'], ['desc', 'asc']).map(post => React.createElement(ListItem, {\n      key: post.id,\n      button: true,\n      component: Link,\n      to: \"/posts/\".concat(post.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: post.title,\n      secondary: post.updatedAt && \"Updated \".concat(moment(post.updatedAt).fromNow()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(ListItemSecondaryAction, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: () => this.deletePost(post),\n      color: \"inherit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(DeleteIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))))))) : !this.state.loading && React.createElement(Typography, {\n      variant: \"subtitle1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"No posts to display\"), React.createElement(Fab, {\n      color: \"secondary\",\n      \"aria-label\": \"add\",\n      className: classes.fab,\n      component: Link,\n      to: \"/posts/new\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(AddIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/posts/:id\",\n      render: this.renderPostEditor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), this.state.error && React.createElement(ErrorSnackbar, {\n      onClose: () => this.setState({\n        error: null\n      }),\n      message: this.state.error.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default compose(withAuth, withRouter, withStyles(styles))(PostsManager);","map":{"version":3,"sources":["/Users/mgrande/Desktop/js_hacking/grandes_hacking/src/pages/PostsManager.js"],"names":["React","Component","Fragment","withAuth","withRouter","Route","Redirect","Link","withStyles","Typography","IconButton","Paper","List","ListItem","ListItemText","ListItemSecondaryAction","Fab","Delete","DeleteIcon","Add","AddIcon","moment","find","orderBy","compose","PostEditor","ErrorSnackbar","styles","theme","posts","marginTop","spacing","fab","position","bottom","right","breakpoints","down","API","process","env","REACT_APP_API","PostsManager","state","loading","error","savePost","post","id","fetch","props","history","goBack","getPosts","renderPostEditor","match","params","Number","componentDidMount","method","endpoint","body","response","JSON","stringify","headers","accept","authorization","auth","getAccessToken","json","console","setState","deletePost","window","confirm","title","render","classes","length","map","updatedAt","fromNow","message"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { withAuth } from '@okta/okta-react';\nimport { withRouter, Route, Redirect, Link } from 'react-router-dom';\nimport {\n  withStyles,\n  Typography,\n  IconButton,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n} from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport { Delete as DeleteIcon, Add as AddIcon } from '@material-ui/icons';\nimport moment from 'moment';\nimport { find, orderBy } from 'lodash';\nimport { compose } from 'recompose';\n\nimport PostEditor from '../components/PostEditor';\nimport ErrorSnackbar from '../components/ErrorSnackbar';\n\nconst styles = theme => ({\n  posts: {\n    marginTop: theme.spacing(2),\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(3),\n    right: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n  },\n});\n\nconst API = process.env.REACT_APP_API || 'http://localhost:3001';\n\nclass PostsManager extends Component {\n  state = {\n    loading: true,\n    posts: [],\n    error: null,\n  };\n\n  componentDidMount() {\n    this.getPosts();\n  }\n\n  async fetch(method, endpoint, body) {\n    try {\n      const response = await fetch(`${API}${endpoint}`, {\n        method,\n        body: body && JSON.stringify(body),\n        headers: {\n          'content-type': 'application/json',\n          accept: 'application/json',\n          authorization: `Bearer ${await this.props.auth.getAccessToken()}`,\n        },\n      });\n      return await response.json();\n    } catch (error) {\n      console.error(error);\n\n      this.setState({ error });\n    }\n  }\n\n  async getPosts() {\n    this.setState({ loading: false, posts: (await this.fetch('get', '/Stocks')) || [] });\n  }\n\n  savePost = async (post) => {\n    if (post.id) {\n      await this.fetch('put', `/posts/${post.id}`, post);\n    } else {\n      await this.fetch('post', '/posts', post);\n    }\n\n    this.props.history.goBack();\n    this.getPosts();\n  }\n\n  async deletePost(post) {\n    if (window.confirm(`Are you sure you want to delete \"${post.title}\"`)) {\n      await this.fetch('delete', `/posts/${post.id}`);\n      this.getPosts();\n    }\n  }\n\n  renderPostEditor = ({ match: { params: { id } } }) => {\n    if (this.state.loading) return null;\n    const post = find(this.state.posts, { id: Number(id) });\n\n    if (!post && id !== 'new') return <Redirect to=\"/posts\" />;\n\n    return <PostEditor post={post} onSave={this.savePost} />;\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Fragment>\n        <Typography variant=\"h4\">Posts Manager</Typography>\n        {this.state.posts.length > 0 ? (\n          <Paper elevation={1} className={classes.posts}>\n            <List>\n              {orderBy(this.state.posts, ['updatedAt', 'title'], ['desc', 'asc']).map(post => (\n                <ListItem key={post.id} button component={Link} to={`/posts/${post.id}`}>\n                  <ListItemText\n                    primary={post.title}\n                    secondary={post.updatedAt && `Updated ${moment(post.updatedAt).fromNow()}`}\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton onClick={() => this.deletePost(post)} color=\"inherit\">\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        ) : (\n          !this.state.loading && <Typography variant=\"subtitle1\">No posts to display</Typography>\n        )}\n        <Fab\n          color=\"secondary\"\n          aria-label=\"add\"\n          className={classes.fab}\n          component={Link}\n          to=\"/posts/new\"\n        >\n          <AddIcon />\n        </Fab>\n        <Route exact path=\"/posts/:id\" render={this.renderPostEditor} />\n        {this.state.error && (\n          <ErrorSnackbar\n            onClose={() => this.setState({ error: null })}\n            message={this.state.error.message}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default compose(\n  withAuth,\n  withRouter,\n  withStyles(styles),\n)(PostsManager);\n"]},"metadata":{},"sourceType":"module"}